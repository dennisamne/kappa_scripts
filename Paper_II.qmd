---
title: "Paper_II"
author: "Dennis Amnebrink"
affiliation-title: "Linnaeus University"
title-block-banner: true
date: now
editor: visual
toc: true
prefer-html: true
number-sections: true
format:
  html:
     code-fold: true
     self-contained: true
---

```{r}
#| label: libraries
#| warning: false
library(data.table)
library(tidyverse)
library(vegan)
library(rain)
library(ggConvexHull)
library(DT)
library(kableExtra)
library(Hmisc)
library(patchwork)
library(ggtext)
library(gridExtra)
library(scales)
```

```{r}
#| label: colourscheme treatments
#| warning: false
GEOM_COL_COLOURS = c(
  RColorBrewer::brewer.pal(12, name = 'Paired'))

SEASON_COLOURS = c("spring" = "#33A02C", "summer" = "#E31A1C",  "autumn" =  "#FF7F00", "winter" = "#1F78B4")

readRenviron("../global_vars.R")
  
TEXT_SIZE <- Sys.getenv("TEXT_SIZE")
```

```{r}
#| label: colourscheme treatments
#| warning: false
GEOM_COL_COLOURS = c(
  RColorBrewer::brewer.pal(12, name = 'Paired'))

YEAR_COLOURS = c("2011" = "#A6CEE3","2012" = "#1F78B4", "2013" = "#B2DF8A","2014" = "#33A02C", "2015" = "#FB9A99", "2016" = "#E31A1C", "2017" = "#FDBF6F", "2018" = "#FF7F00", "2019" = "#CAB2D6")

GENUS_COLOURS1 = c("Aphanizomenon" = "#33A02C",
                   "Dolichospermum" = "#1F78B4", 
                   "Nodularia" = "#A6CEE3",
                   "Anabaena" = "#CAB2D6",
                   "Pseudo-anabaena" = "#FF7F00")

GENUS_COLOURS2 = c("*Aphanizomenon/Dolichospermum*" = "#33A02C",
                   "*Calothrix*" = "#FF7F00",
                   "*Cuspidothrix*" = "#CAB2D6", 
                   "*Nodularia*" = "#A6CEE3",
                   "*Nostoc*" = "#B2DF8A",
                   "*Rivularia*" ="#FB9A99",
                   "*Tolypothrix_B*" = "#E31A1C",
                   "*Trichormus*" = "#FDBF6F",
                   "Unclassified" = "#FB9A99")
```

# 16S section

```{r}
#| label: file_loading
#| warning: false
#| cache: true

asv_tables <- fread("../data/paper_2/ampliseq.ASV_tables.tsv.gz", sep ="\t") # ASV counts per sample, also contains projects other than LMO, i.e "KB", which is for now removed due to the inner_join with sample_ID which LMO is the only project selected.

asv_tax_species <- fread("../data/paper_2/ampliseq.ASV_tax_species.tsv.gz", sep = "\t") %>% # GTDB SDBI (use this one) 
mutate(ASV_name = paste0("ASV_",row_number())) # This is to use a better name than ASV kwengkdnsgpkjasdngfpk 

barrnap <- fread("../data/paper_2/ampliseq.barrnap.tsv.gz", sep = "\t")

dada2 <- fread("../data/paper_2/ampliseq.DADA2_stats.tsv.gz") # Some of these samples not passable at all. Go through properly and see if needed in analysis... Especially A.andersson project has issues.

SILVA <- fread("../data/paper_2/ampliseq.SILVA.ASV_tax.tsv.gz") # Different annotations with SILVA and the ASV_tax_species

#Sample_ID - select the correct projects. I.e some have been replaced, J.Pinhassi_14_02 -> J.Pinhassi_20_04.
# It looks like filtering out A.Andersson samples shouldn't greatly affect the time-series, still a delta of about two weeks.

sample_ID <- fread("../data/paper_2/jp_samples.tsv", sep = "\t") %>%
  filter(seqtype == "16SDNA", filter_fraction == "0.2") %>%# Subsetting to relevant samples (308 LMO-samples for 16S at the 0.2Âµm fraction, so cool!)
  select(-project) # Remove this information as it is conflicting with the other dataframe, and now project is irrelevant
# Find / create a sample key for the 16s to actual dates. Check plate runs for decontam, and see if possible to apply from blanks. Should be specific for the samples where the blanks were used.

#Rerun the data to subset on LMO-only to remove unnecessary operations, and filter out chloroplasts etc
asv_tables <- asv_tables %>% 
  semi_join(sample_ID, by = "sample")

#Creating a unique ASV-name for each asv that is not "0145477917bfe723a3832c7c63a1853d" (deprecated, now using from tax file)
#asv_legend <- asv_tables %>%
#  distinct(ASV_ID) %>%
 # mutate(ASV_ID = as_factor(ASV_ID) %>% fct_reorder(row_number())) %>% 
 # mutate(ASV_name = paste0("ASV",row_number())) 

#Reading in a key for cruisnumber to date
LMODate <- read_tsv("../data/paper_2/LMOCruiseToDate.tsv") %>%
   mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", Date), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", Date), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", Date), "autumn", "winter"))))

# Reading in phytoplankton count figure and converting to understandable format and joining in dates
phytoCount <- read_tsv("../data/paper_2/phyto_counts_USE_20210614.tsv") %>% 
  inner_join(LMODate, by = "LMO") %>%
  filter(!is.na(Biomass_mgC_m3)) %>%# Removing NA's from dataset as they interfere with operations
  mutate(Year = str_extract(Date, "[0-9][0-9][0-9][0-9]")) # Adding year as a separate column

lmo_metadata <- read_tsv("../data/paper_2/LMO_metadata1.tsv.gz", col_types = cols(.default = col_number(), Chla_Average = col_number(), Date = col_datetime())) %>%
rename(dates = "Date")
```

## Biovolume plot

```{r}

TEXT_SIZE = 10
plot1 <- phytoCount %>%
  filter(Genus %in% c("Aphanizomenon")) %>% 
  group_by(Date, Genus) %>%
  summarise(Biovol_mm3_m3 = sum(Biovol_mm3_m3)) %>%
  ungroup() %>%
  inner_join(phytoCount %>% distinct(Date, Year), by = "Date") %>%
  mutate(year_day = case_when(Year == "2011" ~ julian(Date, origin = as.Date("2011-01-01")),
                              Year == "2012" ~ julian(Date, origin = as.Date("2012-01-01")),
                              Year == "2013" ~ julian(Date, origin = as.Date("2013-01-01")),
                              Year == "2014" ~ julian(Date, origin = as.Date("2014-01-01")),
                              Year == "2015" ~ julian(Date, origin = as.Date("2015-01-01")),
                              Year == "2016" ~ julian(Date, origin = as.Date("2016-01-01")),
                              Year == "2017" ~ julian(Date, origin = as.Date("2017-01-01")),
                              Year == "2018" ~ julian(Date, origin = as.Date("2018-01-01")),
                              Year == "2019" ~ julian(Date, origin = as.Date("2019-01-01"))
                              )) %>%
  filter(Year != "2020") %>%
  ggplot(mapping = aes(x = as.Date(year_day, origin = as.Date("2011-01-01")), y = Biovol_mm3_m3, group = Genus, colour = Genus)) +
  geom_line() +
  theme_minimal() +
  theme(strip.text = element_text(size = TEXT_SIZE, colour = "black"),
        axis.text.y = element_text(size = TEXT_SIZE, colour = "black"),
        axis.text.x = element_text(size = TEXT_SIZE, colour = "black", angle = 270, hjust = 1),
        axis.title.x = element_text(size = TEXT_SIZE, colour = "black"),
        axis.title.y = element_text(size = TEXT_SIZE, colour = "black", face = "bold"),
        legend.title = element_text(size = TEXT_SIZE, face = "bold", colour = "black"),
        legend.text = element_text(face = "italic"),
        legend.position = "bottom"
        ) +
  scale_color_manual('Genus', values = c("#33A02C"))  +
  #geom_vline(yintercept = 0, xintercept = as.Date("2015-01-01"), linetype = "dashed") +
  facet_wrap(~ Year, scales = "free_y") +
  scale_x_date(date_breaks = "2 months", date_labels = "%b") +
  xlab("Month") +
  ylab(bquote('Biovolume '(mm^3~m^-3))) 

plot1
```

```{r}
relab_table <- asv_tables %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(date,ASV_ID) %>%
  summarise(count = mean(count)) %>%
  ungroup() %>%
  group_by(date) %>%
  mutate(relab = count/sum(count)) %>%
  ungroup() 

#Making a top eleven family vector
top11vec <- relab_table %>%
  inner_join(asv_tax_species, by = "ASV_ID") %>%
  group_by(Family) %>%
  summarise(relab = sum(relab)) %>%
  ungroup() %>%
  arrange(desc(relab)) %>%
  slice(1:11) %>%
  pull(Family)

df1 <- relab_table %>%
  inner_join(asv_tax_species, by = "ASV_ID") %>% 
  mutate(Family = ifelse(Family %in% top11vec, paste0(Family), paste0("Other"))) %>%
  group_by(Family, date) %>%
  summarise(relab = sum(relab)) %>%
  ungroup() %>%
  mutate(Year = str_extract(date, "[0-9][0-9][0-9][0-9]")) %>%
   mutate(year_day = case_when(Year == "2011" ~ julian(date, origin = as.Date("2011-01-01")),
                              Year == "2012" ~ julian(date, origin = as.Date("2012-01-01")),
                              Year == "2013" ~ julian(date, origin = as.Date("2013-01-01")),
                              Year == "2014" ~ julian(date, origin = as.Date("2014-01-01")),
                              Year == "2015" ~ julian(date, origin = as.Date("2015-01-01")),
                              Year == "2016" ~ julian(date, origin = as.Date("2016-01-01")),
                              Year == "2017" ~ julian(date, origin = as.Date("2017-01-01")),
                              Year == "2018" ~ julian(date, origin = as.Date("2018-01-01")),
                              Year == "2019" ~ julian(date, origin = as.Date("2019-01-01"))
                              )
           
           ) %>%
  filter(Family == "Nostocaceae") 
  

 df2 <-  relab_table %>%
  inner_join(asv_tax_species, by = "ASV_ID") %>%
  filter(Family == "Nostocaceae") %>%
  mutate(Genus = ifelse(Genus == "Dolichospermum", paste0("Aphanizomenon/Dolichospermum"),paste0(Genus))) %>%
  mutate(Genus = gsub("^$", "Unclassified", Genus)) %>%
  group_by(Genus, date) %>%
  summarise(relab = sum(relab)) %>%
  ungroup() %>%
  mutate(Year = str_extract(date, "[0-9][0-9][0-9][0-9]")) %>%
   mutate(year_day = case_when(Year == "2011" ~ julian(date, origin = as.Date("2011-01-01")),
                              Year == "2012" ~ julian(date, origin = as.Date("2012-01-01")),
                              Year == "2013" ~ julian(date, origin = as.Date("2013-01-01")),
                              Year == "2014" ~ julian(date, origin = as.Date("2014-01-01")),
                              Year == "2015" ~ julian(date, origin = as.Date("2015-01-01")),
                              Year == "2016" ~ julian(date, origin = as.Date("2016-01-01")),
                              Year == "2017" ~ julian(date, origin = as.Date("2017-01-01")),
                              Year == "2018" ~ julian(date, origin = as.Date("2018-01-01")),
                              Year == "2019" ~ julian(date, origin = as.Date("2019-01-01"))
                              )
           
           ) %>%
   mutate(Genus = paste0("*",Genus, "*")) %>%
   filter(Genus == "*Aphanizomenon/Dolichospermum*")
   
plot2 <-  ggplot(data = df2, mapping = aes(x = as.Date(year_day, origin = as.Date("2011-01-01")), y = relab*100, fill = Genus, group = Genus, colour = Genus)) +
   geom_line() +
  #geom_line(data = df2, aes(x = as.Date(year_day, origin = as.Date("2011-01-01")), y = relab, fill = Genus, group = Genus)) +
  geom_area(inherit.aes = FALSE, data = df1, aes(x = as.Date(year_day, origin = as.Date("2011-01-01")), y = relab*100), alpha = 0.3) +
  geom_point(size = 0.5) +
  facet_wrap(~ Year) +
 scale_color_manual('Genus', values = c("#33A02C")) +
  theme_minimal() +
  theme(strip.background = element_blank(),
        strip.text = element_text(size = TEXT_SIZE, colour = "black"),
        legend.title = element_text(size = TEXT_SIZE, face = "bold", colour = "black"),
        legend.text = element_markdown(size = TEXT_SIZE, colour = "black"),
        legend.position = "bottom",
        axis.text = element_text(size = TEXT_SIZE, colour = "black"),
        axis.text.x = element_text(size = TEXT_SIZE, colour = "black", angle = 270, hjust = 1),
        axis.title = element_text(size = TEXT_SIZE,colour = "black")
        ) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b") +
  xlab("Month") +
  ylab("Relative abundance (%)") +
  guides(fill = "none")
```

## 16S plot

```{r}
plot1  + 
  plot2 + 
   plot_annotation(tag_levels = 'a') +
  plot_layout(ncol = 1)  & theme(strip.text = element_text(size = TEXT_SIZE),
                                                axis.text.x = element_text(size = TEXT_SIZE),
                                                axis.text.y = element_text(size = TEXT_SIZE),
                                                axis.title = element_text(size = TEXT_SIZE),
                                                    legend.key.size = unit(0.4, 'cm'),
                                                    legend.title = element_text(size=TEXT_SIZE),
                                                    legend.text = element_markdown(size = TEXT_SIZE)) 
  

ggsave("../figures/paper_II_16S_biomass.png", width = 18, height = 26, units = "cm")
```

# MetaT

## Target genes

```{r}
#| label: files
#| warning: false
#| cache: true


# Loading annotation file of expressed genes
  eggnog_names <- c("Geneid", "MAG", "contig", "Start", "End", "Strand", "Length", "seed_eggNOG_ortholog", "seed_ortholog_evalue", "seed_ortholog_score", "Predicted_taxonomic_group", "Predicted_protein_name", "Gene_Ontology_terms", "EC_number", "KEGG_ko", "KEGG_Pathway", "KEGG_Module", "KEGG_Reaction", "KEGG_rclass", "BRITE", "KEGG_TC", "CAZy", "BiGG Reaction", "tax_scope:eggNOG_taxonomic_level_used_for_annotation", "eggNOG_OGs", "bestOG", "COG_Functional_Category", "eggNOG_free_text_description", "sample", "counts")
  
  eggnog_table <- read_tsv("../data/paper_2/eggnog_table_long.tsv.gz", col_types = cols(Start = col_integer(), End = col_integer(), Length = col_integer(), counts = col_integer(), X7 = col_character())) %>%
                             separate(Chr, c("MAG", "contig"), sep ="_k", remove = TRUE) 
  eggnog_table$sample <- sub('.non_rRNA.pe.bowtie2.q5', '', eggnog_table$sample)
   eggnog_table$sample <- sub('.ca.pesickle.pe.bowtie2.sorted.unmappedpairs.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub('.lane00[0-9].ca.pesickle.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub("^", "P", eggnog_table$sample)
   eggnog_table$sample <- sub("PP", "P", eggnog_table$sample)
   eggnog_table$sample <- sub(".sorted.bam", "", eggnog_table$sample)
   
   colnames(eggnog_table) <- eggnog_names
   
   eggnog_table <- eggnog_table %>%
      mutate(Predicted_protein_name = ifelse(Geneid %in% c("OFJACKGI_02436","OFJACKGI_00660"), paste0("psbA"),paste0(Predicted_protein_name))) # These two names were annotated as pufM, as this is unreasonable, they were compared against the prokka annotation which then was used to verify that they are instead psbA
   
   # Loading date file/sample key
   lmo_id_date <- read_tsv("../data/paper_2/lmo_id_date.tsv.gz") %>%
    dplyr::select(1, 2) %>% 
    dplyr::rename(dates=2) %>%
    dplyr::rename(sample="Sample") %>%
    mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", dates), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", dates), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", dates), "autumn", "winter")))) %>%
    mutate(filter_frac = ifelse(grepl("201[2-5]", dates), "filtered", "unfiltered")) %>%
    mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]"))
  lmo_id_date$sample <- sub('P12052_1', 'P12052_3', lmo_id_date$sample) 
  
  #Taxonomy file
  BACL_taxonomy <- read_tsv("../data/paper_2/BACL_identities.tsv.gz") %>%
    separate("Taxonomy", c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";[a-z]__", remove = T) %>%
    mutate(location = ifelse(grepl("*P2236*",MAG ), "redox",
                             ifelse(grepl("*P1994*", MAG), "transect",
                                    ifelse(grepl("*SRR*", MAG), "askÃ¶", "LMO"))))
  
COG_cats <- read_tsv("../data/paper_2/COG_categories.tsv") %>%
  rename(COG_Functional_Category = "COG_category")
 

lmo_metadata <- read_tsv("../data/paper_2/LMO_metadata1.tsv.gz", col_types = cols(.default = col_number(), Chla_Average = col_number(), Date = col_datetime())) %>% subset(Date > "2016-01-01" & Date < "2017-12-31") %>%
rename(dates = "Date")

#Dataframe with the annotated genes, even those not expressed
all_annotations <- read_tsv("../data/paper_2/eggnog_annotated.tsv.gz") %>%
  select(1, "Chr", "X6")


# This file is to connect the LMO-cruise number with the NGI-project ID's
sample_key <- read_csv("../data/paper_2/samplesheet.csv") %>%
  mutate(sampleDate = str_extract(fastq_1, "P[0-9]*_[0-9]*")) %>%
  select(sample, sampleDate)

# Reading in sample translation for the LMO-numbers (used to join cds_table with sample_ID file)
samplesheet <- read_csv("../data/paper_2/samplesheet.csv") %>%
  rename(LMO_ID = "sample", sample = 2) %>%
  select(-3) %>%
  mutate(sample = gsub("./samples/","", sample),
         sample = gsub(".r1.fastq.gz","", sample),
         sample = gsub(".lane00[0-9]","", sample)
         )

# The new file
cds_table <- read_tsv("../data/paper_2/alneberg_bacls0.90.fc.CDS.tsv.gz", comment = "#") %>%
  separate(Chr, c("MAG", "contig"), sep = "_k") %>% #extracting MAG name
  filter(MAG == "P1994_122_bin236") %>% #Selecting relevant MAG
  pivot_longer(cols = 8:ncol(.), names_to = "sample") %>% #Long format
  mutate(sample = gsub(".bam","", sample)) %>% #Removing .bam for joining in with sample file later
  rename(LMO_ID = "sample",
         counts = "value") %>% #Matching names for samplesheet
  inner_join(samplesheet, by = "LMO_ID") %>%
  select(-LMO_ID)

# The new overall stats
new_reads_stats <- read_tsv("../data/paper_2/megahit.prokka.overall_stats.tsv.gz")

#Reading in the total reads from the assembly
assembly_reads <- fread("../data/paper_2/megahit.prokka.counts.tsv.gz", sep = "\t") %>%
  group_by(sample) %>%
  summarise(sample_counts = sum(count)) %>%
  ungroup() %>%
  inner_join(sample_key, by = "sample") %>%
  select(-sample) %>%
  rename(sample = "sampleDate")

LMODate <- read_tsv("../data/paper_2/LMOCruiseToDate.tsv") %>%
   mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", Date), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", Date), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", Date), "autumn", "winter"))))

# Reading in phytoplankton count figure and converting to understandable format and joining in dates
phytoCount <- read_tsv("../data/paper_2/phyto_counts_USE_20210614.tsv") %>% 
  inner_join(LMODate, by = "LMO") %>%
  filter(!is.na(Biomass_mgC_m3)) %>%# Removing NA's from dataset as they interfere with operations
  mutate(Year = str_extract(Date, "[0-9][0-9][0-9][0-9]"))

```

```{r}
#| label: geneVecs
#| warning: false

#photosystem genes" -" PSI and PS22, look at the modules, as seen by Evangelia" "Genes of interest: PS2 Psb[A-F], PS1 psa[A-O], psaX"
 PS2 <- c("psbA", "psbB", "psbC", "psbD","psbE", "psbF")
 PS1 <- c("psaA", "psaB","psaC","psaD","psaE","psaF", "psaG", "psaH","psaI","psaJ","psaK","psaL","psaM","psaN","psaO", "psaX")
 Antenna_proteins <- c("apcA","apcB", "cpcA", "cpcB", "cpeA","cpeB", "cpeC" , "cpeD", "cpeE", "cpeR", "cpeS", "cpeT", "cpeU", "cpeY", "cpeZ")
 
n_fixation <- c("nifH","nifD") # (The two usually expressed genes, nifH probably only relevant)
NitMet <- c("nifH","nifD","amtB","urtA")
c_fixation <- c("rbcL", "cbbL", "cbbM") #(From KEGG pathway, and oown knowledge) "RubisCo""M00165". 
sunscreen_genes <-  c("scyA","scyB","scyC","scyD","scyE") #scyD is not part of core cassette. (Pichel et al. 2019)
#"ribosomal genes" - "" # Did not find any sunscreen genes
Phosphorus_scav_genes <- c("pstS", "pstC", "pstA", "pstB", "phnE","phnC","phoH")


# From Ehira and Miyazaki 2015. See refs therein for origin of genes.
  HeteroDiffGenes <- c("ntcA", "hetR")
  SigFac  <- c("sigC", "sigE","sigG") #Sigmafactors related to differentitation triggered by N-starvation

# From Ãsterholm et al. 2020 TS2
  GasVesgenes <- c("gvpW", "gvpV" ,"gvpG","gvpF","gvpK","gvpJ","gvpN","gvpC","gvpA")
  #toxin genes" - ""
     Microcystin <- c("mcyH", "mcyI", "mcyF", "mcyE", "mcyJ", "mcyD", "mcyG", "mcyA", "mcyB", "mcyC")
     Anabaenopeptilide <- c("apdG","apdF","apdE","apdD","apdB", "apdA") #apdBA are pseudogenes
     Anabaenopeptin <- c("aptE", "aphA","aptD","aptC","aptB","aptA2","aptA1")
     Anabaenolysin <- c("camA", "ablA", "ablB", "ablC", "ablD", "ablE")
     Anacyclamide <- c("acyC", "acyB","acyA","acyE","acyF","acyG")
     Anatoxin_a <- c("anaB", "anaC", "anaD", "anaE", "anaF", "anaG", "anaA")
     Hassallidin <- c("hasZ", "hasY", "hasX" ,"hasW" ,"hasV" ,"hasU" ,"hasT" ,"hasS" ,"hasR" ,"hasQ" ,"hasP" ,"hasO" ,"hasN" ,"hasM" ,"hasL" ,"hasK" ,"hasJ" ,"hasI" ,"hasH" ,"hasG" ,"hasF" ,"hasE" ,"hasD" ,"hasC" ,"hasB" ,"hasA")
     Aeruginosin <- c("aerD", "aerE","aerF","aerG1","aerG2","aerA","aerB")  #AerD and AerG1 are pseudogenes
     Anabaenopeptin_Pseudospumigin_Microviridin <- c("spuF", "spuB", "spuA", "hphB", "hphCD", "aptA", "aptB", "aptC", "aptD", "hphA", "aptE", "mvdA", "mvdB", "mvdC", "mvdE")
     Geosmin <- c("cnb1","cnb2" , "geoA")

# From Mihali et al. 2008
  CylindrospermopsinGenes <- c("aoaA","aoaB","aoaC","cyrJ", "cyrA", "cyrB","cyrC", "cyrD", "cyrE", "cyrF", "cyrG", "cyrH", "cyrI", "cyrJ", "cyrK", "cyrL", "cyrM", "cyrN", "cyrO")
  
  Circadian <- c("kaiC","kaiB","kaiA") #From what article??
  
  #From own data
CobGenes <- c("cbiA", "cbiD","cobI","cobJ","cobK","cbiM","cobO","cbiQ","cbiT","cobQ","cobT","cobW","cbiX")

FolGenes <- c("folA","folB","folC","folD","folE","folK","folP")


OxiStress <- c("gshA","gshB","rbr","dnaJ","dnaJ3","grpE","sodB", "fur")

#Sulfur genes

Sulf <- c("sufB","sufS")
  
  #List of genes of interest, also see Ericks list of interesting genes.
VecOfvecs1 <- c(PS2, PS1, Antenna_proteins, NitMet, c_fixation, sunscreen_genes, Phosphorus_scav_genes, HeteroDiffGenes, SigFac, GasVesgenes,Microcystin, Anabaenopeptilide, Anabaenopeptin, Anabaenolysin, Anacyclamide, Anatoxin_a, Hassallidin, Aeruginosin, Anabaenopeptin_Pseudospumigin_Microviridin, Geosmin, CylindrospermopsinGenes, Circadian, CobGenes, FolGenes, OxiStress, Sulf)

VecOfvecs2 <- c("PS2", "PS1", "Antenna_proteins", "NitMet", "c_fixation", "sunscreen_genes", "Phosphorus_scav_genes", "HeteroDiffGenes", "SigFac", "GasVesgenes", "Microcystin", "Anabaenopeptilide", "Anabaenopeptin", "Anabaenolysin", "Anacyclamide", "Anatoxin_a", "Hassallidin", "Aeruginosin", "Anabaenopeptin_Pseudospumigin_Microviridin", "Geosmin", "CylindrospermopsinGenes","Circadian","CobGenes","FolGenes","OxiStress", "Sulf")
```

```{r}
#| label: filtering-low-abundant-dates
#| warning: false
#| cache: true

genes_and_paths_top50 <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  dplyr::filter(filter_frac == "unfiltered") %>%
  group_by(dates, Geneid, MAG) %>% 
  summarise(counts = as.integer(mean(counts))) %>%
  ungroup() %>%
  inner_join(cds_table %>% distinct(Geneid, Length)) %>%
  group_by(MAG, dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  dplyr::select(-t) 
 
cds_table_filtered <- cds_table %>%  inner_join(lmo_id_date, by = "sample") %>% dplyr::filter(filter_frac == "unfiltered") %>% group_by(dates, MAG, Geneid) %>% summarise(counts = mean(counts)) %>% ungroup() %>% group_by(MAG, dates) %>% summarise(counts = sum(counts)) %>% ungroup() %>% dplyr::filter(counts >= 3000)

genes_and_paths_top50 %>% semi_join(cds_table_filtered, by = c("MAG","dates")) -> filtered_genes_and_paths_top50
```

```{r}
cyc.genes.tres <- read_tsv("../data/paper_2/cyclical_genes_aphani090.tres.tsv")

SigInfo <- filtered_genes_and_paths_top50 %>%
  mutate(type = ifelse(
    Geneid %in% c(
      cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
    mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          #Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                           Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
    filter(Cats != "Other") %>%
   distinct(Predicted_protein_name, type) %>%
  filter(type == "sig") %>%
  pull(Predicted_protein_name)
```

```{r}
hmm <- filtered_genes_and_paths_top50 %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          #Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                           Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
   mutate(type = ifelse(Predicted_protein_name %in% SigInfo, paste0("Yes"), paste0("No"))) %>%
  mutate(Predicted_protein_name = ifelse(Predicted_protein_name %in% SigInfo, paste0("*",Predicted_protein_name,"*"), paste0(Predicted_protein_name))) %>%
  mutate(Group = paste(Cats, Predicted_protein_name, sep = ".")) %>%
  select(Geneid, dates, tpm) %>%
  pivot_wider(values_from = tpm, names_from = Geneid, values_fill  = 0) %>%
  pivot_longer(c(2:ncol(.)), names_to = "Geneid", values_to = "tpm")
```

```{r}
trial <- hmm %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  mutate(Cats = case_when(
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          #Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                         # Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          #Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          #Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          #Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          #Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          #Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          #Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          #Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          #Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          #Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          #Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                         # Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          #Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          #Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          #Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          #Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                         # Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          #Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          # Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
   mutate(type = ifelse(
    Geneid %in% c(cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  filter(type == "sig" | Predicted_protein_name %in% c("hetR")) %>%
  mutate(Predicted_protein_name = paste0("*",Predicted_protein_name,"*")) %>%
  mutate(Group = paste0("*",Cats,"*"))  %>%
  mutate(presentable_names = case_when(Cats == "Antenna_proteins" ~ "Antenna proteins",
                                       Cats == "CobGenes" ~ "Cobalamin metabolism",
                                       Cats == "OxiStress" ~ "Oxidative stress",
                                       Cats == "NitMet" ~ "Nitrogen metabolism",
                                       Cats == "PS1" ~ "Photosystem I",
                                       Cats == "PS2" ~ "Photosystem II",
                                       Cats == "FolGenes" ~ "Folate genes",
                                       Cats == "HeteroDiffGenes" ~ "Heterocyst differentiation",
                                       Cats == "GasVesgenes" ~ "Gas vesicles",
                                       Cats == "c_fixation" ~ "Carbon fixation",
                                       Cats == "Circadian" ~ "Circadian rhythm",
                                       Cats == "Phosphorus_scav_genes" ~ "Phosphate transport",
                                       Cats == "Sulf" ~ "Iron-Sulfur biosynthesis",
                                       TRUE~ paste0(Cats)
                                       )) %>%
  mutate(presentable_names = factor(presentable_names, levels = c("Nitrogen metabolism",
                                                                  "Photosystem I",
                                                                  "Carbon fixation",
                                                                  "Phosphate transport",
                                                                   "Oxidative stress",
                                                                  "Antenna proteins"
                                                                  #"Photosystem II",
                                                                  #"Heterocyst differentiation",
                                                                  #"Cobalamin metabolism",
                                                                 # "Circadian rhythm",
                                                                  #"Gas vesicles",
                                                                  #"Folate genes",
                                                                  #"Iron-Sulfur biosynthesis"
                                                                  
                                                                  
                                                                  )))
```

```{r}

trial1 <- trial 

#  mutate(Predicted_protein_name = as.factor(Predicted_protein_name)) %>%
  # filter(!Predicted_protein_name %in% c("*psbB*","*psbD*","*psbE*")) 
  TEXT_SIZE = 11

scientific <- function(x){
    ifelse(x==0, "0", parse(text=gsub("[+]", "", gsub("e", "%*%10^", scientific_format()(x)))))
}

out <- by(data = trial1, INDICES = trial1$presentable_names, FUN = function(m) {
      m <- droplevels(m)
      m <- ggplot(m, aes(dates, tpm, group=Geneid, colour = Predicted_protein_name)) + 
       geom_line(aes()) +
        theme_classic() +
        theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size =TEXT_SIZE, hjust = 1, angle = 60, colour = "black"),
        axis.text.y = element_text(size = TEXT_SIZE, colour = "black"),
        legend.title = element_blank(),
        legend.text = element_markdown(size = TEXT_SIZE),
        legend.key.size = unit(0.3, 'cm'),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        plot.margin=unit(c(0.05,0.05,0.1,-0.46), "cm"),
        legend.position = "bottom",
        legend.box.spacing = unit(0, "pt"),
        legend.margin=margin(0,0,0,0),
        legend.spacing.x = unit(0.01, 'cm'),
        strip.placement = "outside",
        strip.text = element_markdown(size = TEXT_SIZE, colour = "black"),
        strip.background = element_blank()
        #legend.box.margin=margin(10,10,10,10)
    )  +
        scale_colour_manual('Group', values = GEOM_COL_COLOURS, drop = F) +
        scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
        scale_linetype_manual('Seasonal', values = c(1,2), guide = "none", drop = F) +
       scale_y_continuous(label=scientific) +
        ylab("") +
        facet_wrap(~ presentable_names) +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) 
  
   })

# If you want to supply the parameters to grid.arrange
plotobj <- do.call(grid.arrange, c(out, ncol=3))

png("../figures/Paper_II_selected_genes.png", res = 400, height = 18, width = 18, units = "cm")
plot(plotobj)
dev.off()

ggplot2::ggsave(plotobj1, "../figures/Paper_II_selected_genes.png", height = 18, width = 18, units = "cm")

```
